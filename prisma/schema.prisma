datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums
enum InvoiceStatus {
  DRAFT
  ISSUED
  PAID
  PARTIAL
  CANCELLED
}

enum PaymentType {
  CASH
  CREDIT
}

enum PaymentMethod {
  CASH
  CHECK
  TRANSFER
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String
  passwordHash  String
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relaciones
  paymentRequests     PaymentRequest[] @relation("Requester")
  approvalsTechnical  PaymentRequest[] @relation("TechnicalApprover")
  approvalsFinancial  PaymentRequest[] @relation("FinancialApprover")
  rejections          PaymentRequest[] @relation("Rejections")
  createdOrders       PurchaseOrder[]  @relation("Creator")
  approvedOrders      PurchaseOrder[]  @relation("Approver")
  rejectedOrders      PurchaseOrder[]  @relation("Rejecter")
  createdLoans        Loan[]           @relation("LoanCreator")
  registeredPayments  LoanPayment[]    @relation("PaymentRegistrar")
  orderHistory        PurchaseOrderHistory[]

  @@index([roleId])
}

model Role {
  id          String    @id @default(uuid())
  name        String    @unique
  permissions Json      
  users       User[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Provider {
  id          String    @id @default(uuid())
  name        String    
  ruc         String?   @unique  
  address     String?
  phone       String?
  email       String?
  status      String    @default("ACTIVE")
  contactInfo Json?     
  bankInfo    Json?     
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relaciones
  paymentRequests PaymentRequest[]
  purchaseOrders  PurchaseOrder[]

  @@index([status])
}

model Project {
  id            String    @id @default(uuid())
  name          String
  code          String    @unique
  description   String?
  status        String    @default("ACTIVE")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  loans         Loan[]
  invoices      Invoice[]
  budgetItems   BudgetItem[]
  purchaseOrders PurchaseOrder[]

  @@index([status])
}

model BudgetItem {
  id            String    @id @default(uuid())
  name          String
  code          String    @unique
  description   String?
  amount        Decimal
  status        String    @default("ACTIVE")
  projectId     String
  
  // Relaciones
  project       Project   @relation(fields: [projectId], references: [id])
  purchaseOrders PurchaseOrder[]
  transactions  BudgetTransaction[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([projectId])
  @@index([status])
}

model BudgetTransaction {
  id            String    @id @default(uuid())
  budgetItemId  String
  amount        Decimal
  type          String    // CREDIT o DEBIT
  reference     String    // Número de OC u otro documento
  description   String?
  
  // Relaciones
  budgetItem    BudgetItem @relation(fields: [budgetItemId], references: [id])
  
  createdAt     DateTime  @default(now())

  @@index([budgetItemId])
  @@index([type])
}

model PaymentRequest {
  id          String    @id @default(uuid())
  number      String    @unique
  type        String    // DIRECT, WITH_PO, PARTIAL
  providerId  String
  amount      Decimal
  description String?
  status      String    @default("PENDING")
  paymentType String    @default("contado")  // contado, diferido
  paymentTerm String?   // 30, 60, 90 días
  paymentDate DateTime?
  paymentDetails String?

  // Campos de aprobación técnica
  technicalApproverId String?
  technicalApprovalDate DateTime?
  technicalApprovalComment String?
  
  // Campos de aprobación financiera
  financialApproverId String?
  financialApprovalDate DateTime?
  financialApprovalComment String?
  
  // Campos de rechazo
  rejectedById String?
  rejectionComment String?
  rejectedAt DateTime?
  
  purchaseOrderId String?
  requesterId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relaciones
  provider    Provider  @relation(fields: [providerId], references: [id])
  requester   User     @relation("Requester", fields: [requesterId], references: [id])
  technicalApprover  User?    @relation("TechnicalApprover", fields: [technicalApproverId], references: [id])
  financialApprover  User?    @relation("FinancialApprover", fields: [financialApproverId], references: [id])
  rejectedBy         User?    @relation("Rejections", fields: [rejectedById], references: [id])
  purchaseOrder      PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])

  @@index([providerId])
  @@index([requesterId])
  @@index([status])
  @@index([type])
  @@index([technicalApproverId])
  @@index([financialApproverId])
  @@index([rejectedById])
  @@index([purchaseOrderId])
}

model PurchaseOrder {
  id            String    @id @default(uuid())
  number        String    @unique
  providerId    String
  projectId     String    
  budgetItemId  String    
  totalAmount   Decimal
  status        String
  description   String?
  date          DateTime
  dueDate       DateTime?
  creatorId     String

  // Campos de aprobación
  approvedById  String?
  approvedAt    DateTime?
  approvalComment String?

  // Campos de rechazo
  rejectedById  String?
  rejectedAt    DateTime?
  rejectionComment String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relaciones
  provider      Provider  @relation(fields: [providerId], references: [id])
  project       Project   @relation(fields: [projectId], references: [id])
  budgetItem    BudgetItem @relation(fields: [budgetItemId], references: [id])
  creator       User      @relation("Creator", fields: [creatorId], references: [id])
  approvedBy    User?     @relation("Approver", fields: [approvedById], references: [id])
  rejectedBy    User?     @relation("Rejecter", fields: [rejectedById], references: [id])
  paymentRequests PaymentRequest[]
  items         PurchaseOrderItem[]
  history      PurchaseOrderHistory[]

  @@index([providerId])
  @@index([projectId])
  @@index([budgetItemId])
  @@index([creatorId])
  @@index([approvedById])
  @@index([rejectedById])
  @@index([status])
}

model PurchaseOrderHistory {
  id          String    @id @default(uuid())
  orderId     String
  userId      String
  action      String    // CREATED, APPROVED, REJECTED, etc.
  comment     String?
  createdAt   DateTime  @default(now())

  // Relaciones
  order       PurchaseOrder @relation(fields: [orderId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@index([orderId])
  @@index([userId])
}

model PurchaseOrderItem {
  id          String    @id @default(uuid())
  orderId     String
  description String
  quantity    Int
  unit        String
  unitPrice   Decimal
  total       Decimal
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relaciones
  order       PurchaseOrder @relation(fields: [orderId], references: [id])

  @@index([orderId])
}

model Bank {
  id          String    @id @default(uuid())
  name        String
  code        String    @unique
  status      String    @default("ACTIVE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relaciones
  loans       Loan[]

  @@index([status])
}

model Loan {
  id              String    @id @default(uuid())
  number          String    @unique
  bankId          String
  projectId       String?
  totalAmount     Decimal
  term            Int       // En meses
  interestRate    Decimal   // Tasa anual
  startDate       DateTime
  paymentFrequency String   // monthly, biweekly
  status          String    @default("ACTIVE") // ACTIVE, COMPLETED, CANCELLED
  observations    String?
  creatorId       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relaciones
  bank            Bank      @relation(fields: [bankId], references: [id])
  project         Project?  @relation(fields: [projectId], references: [id])
  creator         User      @relation("LoanCreator", fields: [creatorId], references: [id])
  installments    LoanInstallment[]
  payments        LoanPayment[]

  @@index([bankId])
  @@index([projectId])
  @@index([status])
  @@index([creatorId])
}

model LoanInstallment {
  id          String    @id @default(uuid())
  loanId      String
  number      Int
  date        DateTime
  amount      Decimal
  capital     Decimal
  interest    Decimal
  balance     Decimal
  status      String    @default("PENDING") // PENDING, PAID
  paidDate    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relaciones
  loan        Loan      @relation(fields: [loanId], references: [id])
  payment     LoanPayment?

  @@index([loanId])
  @@index([status])
}

model LoanPayment {
  id              String    @id @default(uuid())
  loanId          String
  installmentId   String    @unique
  amount          Decimal
  paymentDate     DateTime
  paymentMethod   String    // transfer, check
  reference       String?
  observations    String?
  registeredById  String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relaciones
  loan            Loan      @relation(fields: [loanId], references: [id])
  installment     LoanInstallment @relation(fields: [installmentId], references: [id])
  registeredBy    User      @relation("PaymentRegistrar", fields: [registeredById], references: [id])

  @@index([loanId])
  @@index([paymentDate])
  @@index([registeredById])
}

model Client {
  id          String    @id @default(uuid())
  name        String
  status      String    @default("ACTIVE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relaciones
  invoices    Invoice[]

  @@index([status])
}

model Invoice {
  id          String        @id @default(uuid())
  number      String        @unique
  date        DateTime
  clientId    String
  projectId   String?
  paymentType PaymentType   @default(CASH)
  paymentTerm Int?
  dueDate     DateTime?
  status      InvoiceStatus @default(DRAFT)
  observations String?
  total       Float         @default(0)

  // Relaciones
  client      Client        @relation(fields: [clientId], references: [id])
  project     Project?      @relation(fields: [projectId], references: [id])
  items       InvoiceItem[]
  payments    InvoicePayment[]
  documents   Document[]
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([clientId])
  @@index([projectId])
  @@index([status])
  @@index([date])
  @@index([dueDate])
}

model InvoiceItem {
  id          String    @id @default(uuid())
  invoiceId   String
  description String
  quantity    Float
  unitPrice   Float
  total       Float
  
  // Relaciones
  invoice     Invoice   @relation(fields: [invoiceId], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([invoiceId])
}

model InvoicePayment {
  id            String        @id @default(uuid())
  invoiceId     String
  amount        Float
  paymentDate   DateTime
  paymentMethod PaymentMethod
  reference     String?
  observations  String?

  // Relaciones
  invoice       Invoice       @relation(fields: [invoiceId], references: [id])
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([invoiceId])
  @@index([paymentDate])
}

model Document {
  id          String    @id @default(uuid())
  invoiceId   String
  name        String
  path        String
  type        String

  // Relaciones
  invoice     Invoice   @relation(fields: [invoiceId], references: [id])
  
  uploadedAt  DateTime  @default(now())

  @@index([invoiceId])
}